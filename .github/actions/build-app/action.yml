name: Build App
description: 'Builds and archives S&D for a given configuration'
inputs:
  artifact-name:
    description: 'Name of the resulting artifact'
    required: true
  os:
    description: 'OS to build for'
    required: true
  arch:
    description: 'CPU architecture to build for'
    required: true
  armv:
    description: 'arm version to build for'
    required: false
  tags:
    description: 'Build tags to pass to Go'
    required: false
  libusb-path:
    description: 'Optional path to libusb DLL to include'
    required: false
runs:
  using: composite
  steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: snd-frontend
        path: frontend/dist
    - name: Setup Go environment
      uses: actions/setup-go@v3
      with:
        cache: true
        go-version-file: go.mod
        cache-dependency-path: go.sum
    - name: Install Backend Dependencies
      shell: bash
      run: go mod tidy
    - name: Run Build (Bash)
      if: inputs.os != 'windows' || inputs.libusb-path == null
      shell: bash
      run: ./build.sh
      env:
        GOOS: ${{ inputs.os }}
        GOARCH: ${{ inputs.arch }}
        GOARM: ${{ inputs.armv }}
        SND_TAGS: ${{ inputs.tags }}
    - name: Run Build (MSYS2)
      if: inputs.os == 'windows' && inputs.libusb-path != null
      shell: msys2 {0}
      run: ./build.sh
      env:
        GOOS: ${{ inputs.os }}
        GOARCH: ${{ inputs.arch }}
        SND_TAGS: ${{ inputs.tags }}
    - name: Copy libusb DLL
      if: inputs.libusb-path != null
      shell: bash
      run: cp ${{inputs.libusb-path}} build/release/
    - name: Generate Short SHA
      shell: bash
      id: sha
      run: echo "short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT 
    - name: Archive Build
      uses: actions/upload-artifact@v3
      with:
        path: build/release/
        name: ${{ inputs.artifact-name }}-${{ steps.sha.outputs.short }}
        if-no-files-found: error
